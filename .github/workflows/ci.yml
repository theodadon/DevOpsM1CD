name: CI/CD Pipeline

on:
  push:
    branches:
      - "**"
  workflow_dispatch:

jobs:
  # Étape 1 : Tests et vérifications
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      # Vérifie le code source
      - name: Checkout source code
        uses: actions/checkout@v3

      # Installe Java 21
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '21'

      # Exécute les tests unitaires
      - name: Run unit tests
        run: ./mvnw test

      # Vérifie si la documentation se génère
      - name: Build documentation
        run: ./mvnw javadoc:javadoc

      # Teste la construction Docker
      - name: Build Docker image
        run: docker build -t my-test-image .

  # Étape 2 : Déploiement (uniquement sur main)
  deploy:
    if: github.ref == 'refs/heads/main' # Exécuter seulement sur "main"
    needs: test-and-build
    runs-on: ubuntu-latest
    steps:
      # Vérifie le code source
      - name: Checkout source code
        uses: actions/checkout@v3

      # Configure Docker Hub login
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME}}
          password: ${{ secrets.DOCKER_PASSWORD}}

      # Construit et pousse l'image Docker
      - name: Push Docker image
        run: |
          docker build -t theodadon/spring-boot-app:main .
          docker push theodadon/spring-boot-app:main

      # Déploie sur Render.com (via API)
      - name: Deploy to Render
        run: |
          curl -X POST -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"serviceId": "${{ secrets.RENDER_SERVICE_ID}}", "clearCache": true}' \
          https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys

